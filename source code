Import Libraries 
import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
# TfidfVectorizer - This is used to convert text data into numerical values
from sklearn.metrics.pairwise import cosine_similarity
import os

Check the current working directory 

display (os.getcwd())

Change the current working directory and read data 

os.chdir(' D:\Machine learning\PRJ Movie Recommendation System\\')
movies_data =pd.read_csv('movies.csv')
movies_data.head()


Display the shape 
display (movies_data.shape)

Selecting the relevant features for recommendation
selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

Display the info 
display (movies_data.info())

Check for Null Values 
display (movies_data.isna().sum())

Display the selected columns 
display (movies_data[selected_features].head())

Check Null Values in selected columns 
display (movies_data[selected_features].isna().sum())

Replacing the null values with null string

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')
display (movies_data.head())

Combining all the 5 selected features

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']
display (combined_features)

Converting the text data to feature vectors
This is to find cosine similarity 
# Vector shape is (4803, 17318). This is based on the number of distinct words. All the words will be converted to their equivalent numbers.

vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)
display (feature_vectors.shape)
print (feature_vectors)

Getting the similarity scores using cosine similarity
similarity = cosine_similarity(feature_vectors)
print  (similarity )

Print Shape Cosine Similarity
display(similarity.shape)

Enter the movie name to get Similarity 
movie_name = input(' Enter your favourite movie name : ')


Creating a list with all the movie names given in the dataset

list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

Length of the List 
len(list_of_all_titles)

Finding the close match for the movie name given by the user

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_close_match)

Display the close match 
close_match = find_close_match[0]
print(close_match)

Finding the index of the movie with the title
index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

Get the similarity row for the selected index 
These are the similarity values for the movie entered by the user 
similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)


Length of Similarity Score 
len(similarity_score)

Sorting the movies based on their similarity score
Display the index and similarity rating as a tuple
 This list is sorted based on the similarity score

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 
print(sorted_similar_movies)

Print the name of similar movies based on the index â€“ Top 30 

print('Movies suggested for you : \n')
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1
Consolidated code 
movie_name = input(' Enter your favourite movie name : ')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1
